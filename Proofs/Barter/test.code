import "hashes/sha256/512bit" as sha256;
import "utils/pack/u32/pack256" as pack256;

def main(private u32[8] mut balance, private u32[8] sumBidLeftA, private u32[8] sumBidRightA, private u32[8] sumBidLeftB, private u32[8] sumBidRightB, private u32[8] bidLeftA, private u32[8] bidRightA, private u32[8] bidLeftB, private u32[8] bidRightB, public field balanceCommitment, public field nextBalanceCommitment, public field sumBidCommitmentA, public field sumBidCommitmentB, public field bidCommitmentA, public field bidCommitmentB) -> field {
      
    u32[8] computedBalanceCommitmentUnpacked = sha256(balance[0..8], balance[0..8]);
    field computedBalanceCommitment = pack256(computedBalanceCommitmentUnpacked);
        
    u32[8] computedSumBidCommitmentUnpackedA = sha256(sumBidLeftA[0..8], sumBidRightA[0..8]);
    field computedSumBidCommitmentA = pack256(computedSumBidCommitmentUnpackedA);

    u32[8] computedSumBidCommitmentUnpackedB = sha256(sumBidLeftB[0..8], sumBidRightB[0..8]);
    field computedSumBidCommitmentB = pack256(computedSumBidCommitmentUnpackedB);

    u32[8] computedBidCommitmentUnpackedA = sha256(bidLeftA[0..8], bidRightA[0..8]);
    field computedBidCommitmentA = pack256(computedBidCommitmentUnpackedA);

    u32[8] computedBidCommitmentUnpackedB = sha256(bidLeftB[0..8], bidRightB[0..8]);
    field computedBidCommitmentB = pack256(computedBidCommitmentUnpackedB);

    bool mut hasSolution = true;
    for u32 i in 0..7 {
        hasSolution = ((sumBidLeftA[i] - sumBidLeftB[i]) >= (sumBidRightA[i] - sumBidRightB[i]) && hasSolution == true) ? true : false;
    }

    for u32 i in 0..7 {
        balance[i] = balance[i] + (bidRightA[i] - bidRightB[i]);
    }

    u32[8] computedNextBalanceCommitmentUnpacked = sha256(balance[0..8], balance[0..8]);
    field computedNextBalanceCommitment = pack256(computedNextBalanceCommitmentUnpacked);

    field result = (computedBalanceCommitment == balanceCommitment && computedSumBidCommitmentA == sumBidCommitmentA && computedSumBidCommitmentB == sumBidCommitmentB && computedBidCommitmentA == bidCommitmentA && computedBidCommitmentB == bidCommitmentB && hasSolution == true && computedNextBalanceCommitment == nextBalanceCommitment) ? 1 : 0;

    return result;
}