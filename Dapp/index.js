window.addEventListener('load', async () => {
    provider = new ethers.providers.Web3Provider(web3.currentProvider);

    await provider.send("eth_requestAccounts", []);

    $("#send-token-loader").hide();
    $("#receive-token-loader").hide();
});

var abi = JSON.parse('[{"inputs":[{"internalType":"string","name":"_tokenGroupName","type":"string"},{"internalType":"string","name":"_tokenGroupSymbol","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"collectFreeTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"string","name":"_publicKey","type":"string"}],"name":"consentToDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"freeBalanceCommitment","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getPublicKey","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"}],"name":"getSecretMessage","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"monitorContractStatus","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_depositCommitment","type":"uint256"},{"internalType":"uint256","name":"_nextBalanceCommitment","type":"uint256"},{"internalType":"string","name":"_secretMessage","type":"string"}],"name":"privateDeposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_nextBalanceCommitment","type":"uint256"}],"name":"privateWithdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"requestToDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"_newBalanceCommitment","type":"uint256"}],"name":"setNewBalanceCommitment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenContractOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenGroupName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenGroupSymbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]');


var abi_barter = JSON.parse('[{"inputs":[{"internalType":"address","name":"_multiTokenAddress","type":"address"},{"internalType":"uint256","name":"_numberOfMaximumUsers","type":"uint256"},{"internalType":"uint256","name":"_maximumBidReproposalCycle","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"BarterContractOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"uint256","name":"_newBalanceCommitment","type":"uint256"}],"name":"barterTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"calculateMaximumHypercubeDimension","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getContractOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getHypercubePairA","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getHypercubePairB","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getHypercubePairsAddresses","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getHypercubePairsPublicKeys","outputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSecretBidAggregationFromPairs","outputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"monitorContractStatus","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"uint256","name":"_bidCommitmentA","type":"uint256"},{"internalType":"uint256","name":"_bidCommitmentB","type":"uint256"},{"internalType":"uint256","name":"_newBalanceCommitment","type":"uint256"},{"internalType":"string","name":"_publicKey","type":"string"}],"name":"proposeBid","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"uint256","name":"_bidCommitmentA","type":"uint256"},{"internalType":"uint256","name":"_bidCommitmentB","type":"uint256"},{"internalType":"uint256","name":"_newBalanceCommitment","type":"uint256"}],"name":"reproposeBid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_secretMessageA","type":"string"},{"internalType":"string","name":"_secretMessageB","type":"string"}],"name":"submitSecretBidAggregationToPairs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[2]","name":"aA","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"bA","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"cA","type":"uint256[2]"},{"internalType":"uint256[2]","name":"aB","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"bB","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"cB","type":"uint256[2]"},{"internalType":"uint256","name":"newAggregatedBidCommitmentA","type":"uint256"},{"internalType":"uint256","name":"newAggregatedBidCommitmentB","type":"uint256"}],"name":"verifyBidAggregation","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"zeroBidCommitmentA","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"zeroBidCommitmentB","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]');

var bytecode = "";
    
var bytecode_barter = "6080604052600b80546001600160a01b03191690556000600c819055600d819055600e819055600f81905560108190556011819055601281905560135534801561004857600080fd5b5060405162005c1738038062005c17833981016040819052610069916100ad565b600b80546001600160a01b03949094166001600160a01b0319948516179055601391909155600c556014805460ff19169055600080543392169190911790556100f0565b6000806000606084860312156100c257600080fd5b83516001600160a01b03811681146100d957600080fd5b602085015160409095015190969495509392505050565b615b1780620001006000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636ece437711610097578063ab414f2b11610066578063ab414f2b146102eb578063d53b9efd146102fe578063d74f987d14610306578063e1c379221461031c57600080fd5b80636ece43771461029e5780638c7a0691146102a657806393e20bb0146102b95780639bc18a2f146102e357600080fd5b8063633c6e98116100d3578063633c6e981461017f57806366f796871461022e578063674cdffe146102635780636bef78221461028657600080fd5b806307574c4b14610105578063442890d5146101325780634bb4cb371461015757806362da21a91461016a575b600080fd5b61010d610342565b604080516001600160a01b039384168152929091166020830152015b60405180910390f35b6000546001600160a01b03165b6040516001600160a01b039091168152602001610129565b60005461013f906001600160a01b031681565b61017d61017836600461197d565b6103bd565b005b33600090815260026020908152604080832054600383528184205460058452828520546006855283862054600786528487205460089096529390952054600c54600d54600e54600f54601054601154979a9699969897604080519c8d5260208d019b909b52998b019890985260608a0196909652608089019490945260a088019290925260c087015260e086015261010085015261012084015261014083015261016082015261018001610129565b6102557f18c55ef292f333c280f240bf719a5d55ec16336fd9ec9ffeab77239a5837a9d481565b604051908152602001610129565b61027661027136600461180a565b610439565b6040519015158152602001610129565b61028e61074c565b6040516101299493929190611b7a565b6102556108d1565b61017d6102b43660046118c0565b610910565b6102cc6102c7366004611776565b610cee565b604080519215158352901515602083015201610129565b61017d611105565b6102766102f936600461185a565b61113f565b61025561140f565b61030e611420565b604051610129929190611b4c565b6102557ed23beda912f073e5abe4453c16f1b322f51a010a745f26f09bb98594570c2681565b600080600061034f61140f565b9050600061035b6108d1565b90506015828154811061037057610370611d5f565b600091825260209091200154601580546001600160a01b03909216918390811061039c5761039c611d5f565b60009182526020909120015490956001600160a01b03909116945092505050565b6000806103c8610342565b3360009081526009602090815260408083206001600160a01b0386168452825290912087519395509193506104009290870190611579565b50336000908152600a602090815260408083206001600160a01b03851684528252909120845161043292860190611579565b5050505050565b6000600260145460ff16600381111561045457610454611d49565b14806104765750600360145460ff16600381111561047457610474611d49565b145b6104d35760405162461bcd60e51b815260206004820152602360248201527f537461747573206e6f7420696e20526570726f706f73616c206f72204261727460448201526265722160e81b60648201526084015b60405180910390fd5b600b546040516001600160a01b03909116906000906104f1906115fd565b604051809103906000f08015801561050d573d6000803e3d6000fd5b5090506000816001600160a01b0316636a89a2108989896040518060e00160405280896001600160a01b03166370a08231336040518263ffffffff1660e01b815260040161056a91906001600160a01b0391909116815260200190565b60206040518083038186803b15801561058257600080fd5b505afa158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba91906119e1565b815260208082018d9052336000818152600583526040808220548186015282825260068452808220546060860152828252600284528082205460808601529181526003909252908190205460a0830152600160c090920191909152516001600160e01b031960e087901b1681526106379493929190600401611afb565b60206040518083038186803b15801561064f57600080fd5b505afa158015610663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106879190611954565b905080156107415760405163760a316b60e11b8152336004820152602481018690526001600160a01b0384169063ec1462d690604401600060405180830381600087803b1580156106d757600080fd5b505af11580156106eb573d6000803e3d6000fd5b5050336000908152600260209081526040808320839055600390915281208190556012805460019450909250610722908490611bdc565b90915550506015546012541415610741576000546001600160a01b0316ff5b979650505050505050565b60608060008060008061075d610342565b6001600160a01b038083166000908152600960209081526040808320338085529083528184209486168452600a83528184209084529091529020600e54600f548354959750939550919390929084906107b590611cf8565b80601f01602080910402602001604051908101604052809291908181526020018280546107e190611cf8565b801561082e5780601f106108035761010080835404028352916020019161082e565b820191906000526020600020905b81548152906001019060200180831161081157829003601f168201915b5050505050935082805461084190611cf8565b80601f016020809104026020016040519081016040528092919081815260200182805461086d90611cf8565b80156108ba5780601f1061088f576101008083540402835291602001916108ba565b820191906000526020600020905b81548152906001019060200180831161089d57829003601f168201915b505050505092509550955095509550505090919293565b60006001600f54600e546108e59190611ce1565b6108ef9190611ce1565b6108fa906002611c37565b3360009081526001602052604090205418919050565b600060145460ff16600381111561092957610929611d49565b146109765760405162461bcd60e51b815260206004820152601760248201527f537461747573206e6f7420696e2050726f706f73616c2100000000000000000060448201526064016104ca565b336000908152600460205260409020805461099090611cf8565b1590506109df5760405162461bcd60e51b815260206004820152601a60248201527f5573657220616c72656164792070726f706f736564206269642100000000000060448201526064016104ca565b600b546040516001600160a01b03909116906000906109fd9061160a565b604051809103906000f080158015610a19573d6000803e3d6000fd5b5090506000816001600160a01b0316636a89a2108b8b8b6040518060e001604052807ed23beda912f073e5abe4453c16f1b322f51a010a745f26f09bb98594570c2681526020017f18c55ef292f333c280f240bf719a5d55ec16336fd9ec9ffeab77239a5837a9d481526020018d81526020018c8152602001896001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401610acd91906001600160a01b0391909116815260200190565b60206040518083038186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d91906119e1565b81526020018b815260200160018152506040518563ffffffff1660e01b8152600401610b4c9493929190611afb565b60206040518083038186803b158015610b6457600080fd5b505afa158015610b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9c9190611954565b90508015610ce25760405163760a316b60e11b8152336004820152602481018690526001600160a01b0384169063ec1462d690604401600060405180830381600087803b158015610bec57600080fd5b505af1158015610c00573d6000803e3d6000fd5b50503360009081526002602090815260408083208c9055600582528083208c9055600382528083208b9055600682528083208b9055600482529091208751610c4f945090925090870190611579565b5060158054336000818152600160208190526040822084905583018455929092527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750180546001600160a01b0319169091179055610cab611105565b60135460155414610cbd576000610cc0565b60015b6014805460ff19166001836003811115610cdc57610cdc611d49565b02179055505b50505050505050505050565b600080600160145460ff166003811115610d0a57610d0a611d49565b14610d575760405162461bcd60e51b815260206004820152601860248201527f537461747573206e6f7420696e2048797065726375626521000000000000000060448201526064016104ca565b600080610d62610342565b915091506000604051610d7490611617565b604051809103906000f080158015610d90573d6000803e3d6000fd5b5090506000816001600160a01b031663aa2415228f8f8f604051806080016040528060056000336001600160a01b03166001600160a01b03168152602001908152602001600020548152602001600560008c6001600160a01b03166001600160a01b031681526020019081526020016000205481526020018e815260200160018152506040518563ffffffff1660e01b8152600401610e329493929190611a9e565b60206040518083038186803b158015610e4a57600080fd5b505afa158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e829190611954565b90506000826001600160a01b031663aa2415228d8d8d604051806080016040528060066000336001600160a01b03166001600160a01b03168152602001908152602001600020548152602001600660008c6001600160a01b03166001600160a01b031681526020019081526020016000205481526020018e815260200160018152506040518563ffffffff1660e01b8152600401610f239493929190611a9e565b60206040518083038186803b158015610f3b57600080fd5b505afa158015610f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f739190611954565b9050818015610f7f5750805b156110f157600160106000828254610f979190611bdc565b90915550506015546010541415611015576001600f6000828254610fbb9190611bdc565b90915550506000601055600e54600f541415611015576001600d6000828254610fe49190611bdc565b90915550506000600f556014805460ff19166002179055600c54600d541415611015576014805460ff191660031790555b6001600160a01b03851660009081526007602052604090205461104957336000908152600760205260409020899055611083565b3360009081526005602081815260408084208d90556001600160a01b03891684526007808352818520805494845291852093909355919052555b6001600160a01b0384166000908152600860205260409020546110b7573360009081526008602052604090208890556110f1565b3360009081526006602081815260408084208c90556001600160a01b03881684526008808352818520805494845291852093909355919052555b909e909d509b505050505050505050505050565b6000600e5460026111169190611c37565b60155490915081101561113c576001600e60008282546111369190611bdc565b90915550505b50565b6000600260145460ff16600381111561115a5761115a611d49565b146111a75760405162461bcd60e51b815260206004820152601960248201527f537461747573206e6f7420696e20526570726f706f73616c210000000000000060448201526064016104ca565b600b546040516001600160a01b03909116906000906111c59061160a565b604051809103906000f0801580156111e1573d6000803e3d6000fd5b506040805160e081018252336000818152600260209081528482205484528282526003815284822054908401528284018b9052606083018a905292516370a0823160e01b8152600481019190915292935090916001600160a01b0380851692636a89a210928e928e928e9290916080830191908b16906370a082319060240160206040518083038186803b15801561127857600080fd5b505afa15801561128c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b091906119e1565b81526020018b815260200160018152506040518563ffffffff1660e01b81526004016112df9493929190611afb565b60206040518083038186803b1580156112f757600080fd5b505afa15801561130b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132f9190611954565b905080156114025760405163760a316b60e11b8152336004820152602481018690526001600160a01b0384169063ec1462d690604401600060405180830381600087803b15801561137f57600080fd5b505af1158015611393573d6000803e3d6000fd5b50503360009081526002602090815260408083208c9055600582528083208c9055600382528083208b90556006909152812089905560118054600194509092506113de908490611bdc565b909155505060155460115414156114025760006011556014805460ff191660011790555b9998505050505050505050565b6000600f5460026108fa9190611c37565b60608060008061142e610342565b6001600160a01b0380831660009081526004602052604080822092841682529020815493955091935091829061146390611cf8565b80601f016020809104026020016040519081016040528092919081815260200182805461148f90611cf8565b80156114dc5780601f106114b1576101008083540402835291602001916114dc565b820191906000526020600020905b8154815290600101906020018083116114bf57829003601f168201915b505050505091508080546114ef90611cf8565b80601f016020809104026020016040519081016040528092919081815260200182805461151b90611cf8565b80156115685780601f1061153d57610100808354040283529160200191611568565b820191906000526020600020905b81548152906001019060200180831161154b57829003601f168201915b505050505090509350935050509091565b82805461158590611cf8565b90600052602060002090601f0160209004810192826115a757600085556115ed565b82601f106115c057805160ff19168380011785556115ed565b828001600101855582156115ed579182015b828111156115ed5782518255916020019190600101906115d2565b506115f9929150611624565b5090565b6114e780611d8c83390190565b6114e98061327383390190565b6113868061475c83390190565b5b808211156115f95760008155600101611625565b600082601f83011261164a57600080fd5b611652611bb3565b80838560808601111561166457600080fd5b60005b60028110156116915761167a878361169c565b845260209093019260409190910190600101611667565b509095945050505050565b600082601f8301126116ad57600080fd5b6116b5611bb3565b8083856040860111156116c757600080fd5b60005b60028110156116915781358452602093840193909101906001016116ca565b600082601f8301126116fa57600080fd5b813567ffffffffffffffff8082111561171557611715611d75565b604051601f8301601f19908116603f0116810190828211818310171561173d5761173d611d75565b8160405283815286602085880101111561175657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600080610240898b03121561179357600080fd5b61179d8a8a61169c565b97506117ac8a60408b01611639565b96506117bb8a60c08b0161169c565b95506117cb8a6101008b0161169c565b94506117db8a6101408b01611639565b93506117eb8a6101c08b0161169c565b9250610200890135915061022089013590509295985092959890939650565b600080600080610120858703121561182157600080fd5b61182b868661169c565b935061183a8660408701611639565b92506118498660c0870161169c565b939692955092936101000135925050565b600080600080600080610160878903121561187457600080fd5b61187e888861169c565b955061188d8860408901611639565b945061189c8860c0890161169c565b93506101008701359250610120870135915061014087013590509295509295509295565b6000806000806000806000610180888a0312156118dc57600080fd5b6118e6898961169c565b96506118f58960408a01611639565b95506119048960c08a0161169c565b945061010088013593506101208801359250610140880135915061016088013567ffffffffffffffff81111561193957600080fd5b6119458a828b016116e9565b91505092959891949750929550565b60006020828403121561196657600080fd5b8151801515811461197657600080fd5b9392505050565b6000806040838503121561199057600080fd5b823567ffffffffffffffff808211156119a857600080fd5b6119b4868387016116e9565b935060208501359150808211156119ca57600080fd5b506119d7858286016116e9565b9150509250929050565b6000602082840312156119f357600080fd5b5051919050565b8060005b6002811015611a2857611a12848351611a2e565b60409390930192602091909101906001016119fe565b50505050565b8060005b6002811015611a28578151845260209384019390910190600101611a32565b6000815180845260005b81811015611a7757602081850181015186830182015201611a5b565b81811115611a89576000602083870101525b50601f01601f19169290920160200192915050565b6101808101611aad8287611a2e565b611aba60408301866119fa565b611ac760c0830185611a2e565b61010082018360005b6004811015611aef578151835260209283019290910190600101611ad0565b50505095945050505050565b6101e08101611b0a8287611a2e565b611b1760408301866119fa565b611b2460c0830185611a2e565b61010082018360005b6007811015611aef578151835260209283019290910190600101611b2d565b604081526000611b5f6040830185611a51565b8281036020840152611b718185611a51565b95945050505050565b608081526000611b8d6080830187611a51565b8281036020840152611b9f8187611a51565b604084019590955250506060015292915050565b6040805190810167ffffffffffffffff81118282101715611bd657611bd6611d75565b60405290565b60008219821115611bef57611bef611d33565b500190565b600181815b80851115611c2f578160001904821115611c1557611c15611d33565b80851615611c2257918102915b93841c9390800290611bf9565b509250929050565b60006119768383600082611c4d57506001611cdb565b81611c5a57506000611cdb565b8160018114611c705760028114611c7a57611c96565b6001915050611cdb565b60ff841115611c8b57611c8b611d33565b50506001821b611cdb565b5060208310610133831016604e8410600b8410161715611cb9575081810a611cdb565b611cc38383611bf4565b8060001904821115611cd757611cd7611d33565b0290505b92915050565b600082821015611cf357611cf3611d33565b500390565b600181811c90821680611d0c57607f821691505b60208210811415611d2d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe608060405234801561001057600080fd5b506114c7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636a89a2101461003b578063f07322a714610062575b600080fd5b61004e61004936600461122d565b610075565b604051901515815260200160405180910390f35b61004e6100703660046112d6565b610189565b600061007f610fd6565b604080518082018252875181526020808901518183015290835281516080810183528751518184019081528851830151606083015281528251808401845288830180515182525183015181840152818301528382015281518083018352865181528682015181830152838301528151600780825261010082019093526000929091820160e08036833701905050905060005b60078110156101605784816007811061012c5761012c611465565b602002015182828151811061014357610143611465565b60209081029190910101528061015881611412565b915050610111565b5061016b8183610227565b61017a57600192505050610181565b6000925050505b949350505050565b60408051600780825261010082019092526000918291906020820160e08036833701905050905060005b6007811015610202578381600781106101ce576101ce611465565b60200201518282815181106101e5576101e5611465565b6020908102919091010152806101fa81611412565b9150506101b3565b5061020d8185610227565b61021b576001915050610221565b60009150505b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816102536103aa565b90508060800151518551600161026991906113c4565b1461027357600080fd5b604080518082019091526000808252602082018190525b865181101561032157838782815181106102a6576102a6611465565b6020026020010151106102b857600080fd5b61030d8261030885608001518460016102d191906113c4565b815181106102e1576102e1611465565b60200260200101518a85815181106102fb576102fb611465565b6020026020010151610a0e565b610a72565b91508061031981611412565b91505061028a565b5061034a81836080015160008151811061033d5761033d611465565b6020026020010151610a72565b905061038e8560000151866020015161036284610acc565b85604001516103748a60400151610acc565b6060880151885161038490610acc565b8960200151610b6b565b61039e5760019350505050610221565b50600095945050505050565b6103b2611027565b6040805180820182527f1d16804a531100edcc5bbc4f2928db4a41e7af31a41c39b2b0b37c703dbe232081527f0dc2c57b90cb4bd41b3a75569a5edc74fbad78595aed9daf947f96b052ecaca16020808301919091529083528151608080820184527f0f555c21c682ec56bf1c0edb968749311b1e7fad1c58eb65426b02faf3b1669f8285019081527f0cb01d732031aa90bccee8c4f397d20045ebbee60f25e1783fe9d5238adbb337606080850191909152908352845180860186527f0986c011fdb6013802ebddc0569fe7b6795f05fdc7edc651ff45366ab8774c4e81527f02fed3d5bbb45f207e3edde3b04f4ebf45eedd84a0f42de4809f6d53ebe80a70818601528385015285840192909252835180820185527f0917c87cfd134d68993fe81ae02d61e6e8d36d0edc9eb921a6aba157b88cd57b8186019081527f0cec9b2c3563e17374c9c41d164a04600951935fdaaade43eeec9f9f2293ed35828501528152845180860186527f2fcbabacecc1a193a24258c83cf24ab4fb0115ef2ff61d73a51a8e045567540281527f0c8f76dd41d2a5f76a5763a25a94e0918b3a1e7b06db22d05111e3aadda8aa1e818601528185015285850152835190810184527f2c5a408fe5d7c7c09d4d8178f78aa80b64946bf35d04eb1745756d523aab34a08185019081527f15ea51b7e43f81baa51fdb7891fff572d1a118761436711f3747e79d33ec62f4828401528152835180850185527e038faf5f33cd1b2f76adcb49b0671ffd553396751723b8e92b63ec1317bfea81527f0a9f2193b9a21fde94f3cc3f3df2b1ec24531a71ffca3c2cdb7a36f684c26557818501528184015290840152815160088082526101208201909352919082015b604080518082019091526000808252602082015281526020019060019003908161062d57505060808201908152604080518082019091527e6790478d241c6b6521ab5a41080022c83e36c10d15c2d14325da583ece8a5281527f2f801b89ce867c27c3a893a448af588918e416ee75a1105d4dc600bf8345ac7f6020820152905180516000906106bf576106bf611465565b602002602001018190525060405180604001604052807f2d78c13df4911e9c29632472865dc2a9a2c5803d0a2447e6e67ac76f65634f2d81526020017f08f6018b7e1878ea5a448a2c9464d87851b24049bf596ecb539a885ab77ce366815250816080015160018151811061073657610736611465565b602002602001018190525060405180604001604052807f1fd6f0c131dda1f973eab8cb20b0921b61edb0c5ef22214f54f96827467de13b81526020017f108b9687e552bdcbc14ede488a4542091ce9f79d33ff8b0c3578e15a44997b6681525081608001516002815181106107ad576107ad611465565b602002602001018190525060405180604001604052807f0ca1dd6dbd1fdda81c00d6f52f25447386dd6f7c6f5a18379eea849eb116b91a81526020017f149adcda57f76ce107c5474137c8d47851abea76b75e6c25f802eff01a7ce7a7815250816080015160038151811061082457610824611465565b602002602001018190525060405180604001604052807f059e419cc92b277b0faad988bbbd17426ed630222a0a1f99cc34b984c8009a0a81526020017f2503f9bd94080c301b0ab77eae314657e9e28eaa8b93a7c08110ea7ddb7ffcc6815250816080015160048151811061089b5761089b611465565b602002602001018190525060405180604001604052807f27e8ab1663f3c3a6757ccdb506e3c337684d273eb8c60d2ba26171daeee07a9f81526020017f1adca9b4102037d743d1934cc880c233f8d031f35fdf067350259aa99d80e99e815250816080015160058151811061091257610912611465565b602002602001018190525060405180604001604052807f22f386d8ab2b9852b66d596b3bfbcfc8020b44b53f9ee749ae8609356937164481526020017f0c256c94186e0c2fd22178106a2c3a2ebee3e4cf2458ad32f591e3a5d76d0ef6815250816080015160068151811061098957610989611465565b602002602001018190525060405180604001604052807f28c29875ffe2c377644ba250bcafb8d902b5e3478b1c83590b0972717c47efb781526020017f0f4097124caeecfa8927c36745877aba17cbb12fcc91a93790edbc19560c2c068152508160800151600781518110610a0057610a00611465565b602002602001018190525090565b6040805180820190915260008082526020820152610a2a611078565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610a5d57610a5f565bfe5b5080610a6a57600080fd5b505092915050565b6040805180820190915260008082526020820152610a8e611096565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610a5d57610a5f565b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790158015610b1357506020830151155b15610b335750506040805180820190915260008082526020820152919050565b604051806040016040528084600001518152602001828560200151610b58919061142d565b610b6290846113fb565b90529392505050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610b8657505060408051600480825260a0820190925291925060009190602082015b610bd06110b4565b815260200190600190039081610bc85790505090508a82600081518110610bf957610bf9611465565b60200260200101819052508882600181518110610c1857610c18611465565b60200260200101819052508682600281518110610c3757610c37611465565b60200260200101819052508482600381518110610c5657610c56611465565b60200260200101819052508981600081518110610c7557610c75611465565b60200260200101819052508781600181518110610c9457610c94611465565b60200260200101819052508581600281518110610cb357610cb3611465565b60200260200101819052508381600381518110610cd257610cd2611465565b6020026020010181905250610ce78282610cf6565b9b9a5050505050505050505050565b60008151835114610d0657600080fd5b82516000610d158260066113dc565b905060008167ffffffffffffffff811115610d3257610d3261147b565b604051908082528060200260200182016040528015610d5b578160200160208202803683370190505b50905060005b83811015610f9657868181518110610d7b57610d7b611465565b60200260200101516000015182826006610d9591906113dc565b610da09060006113c4565b81518110610db057610db0611465565b602002602001018181525050868181518110610dce57610dce611465565b60200260200101516020015182826006610de891906113dc565b610df39060016113c4565b81518110610e0357610e03611465565b602002602001018181525050858181518110610e2157610e21611465565b60209081029190910181015151015182610e3c8360066113dc565b610e479060026113c4565b81518110610e5757610e57611465565b602002602001018181525050858181518110610e7557610e75611465565b6020908102919091010151515182610e8e8360066113dc565b610e999060036113c4565b81518110610ea957610ea9611465565b602002602001018181525050858181518110610ec757610ec7611465565b602002602001015160200151600160028110610ee557610ee5611465565b602002015182610ef68360066113dc565b610f019060046113c4565b81518110610f1157610f11611465565b602002602001018181525050858181518110610f2f57610f2f611465565b602002602001015160200151600060028110610f4d57610f4d611465565b602002015182610f5e8360066113dc565b610f699060056113c4565b81518110610f7957610f79611465565b602090810291909101015280610f8e81611412565b915050610d61565b50610f9f6110d4565b6000602082602086026020860160086107d05a03fa9050808015610a5d575080610fc857600080fd5b505115159695505050505050565b6040805160a0810190915260006060820181815260808301919091528152602081016110006110b4565b8152602001611022604051806040016040528060008152602001600081525090565b905290565b6040805160e08101909152600060a0820181815260c08301919091528152602081016110516110b4565b815260200161105e6110b4565b815260200161106b6110b4565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806110c76110f2565b81526020016110226110f2565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600082601f83011261112157600080fd5b61112961139b565b80838560408601111561113b57600080fd5b60005b600281101561115d57813584526020938401939091019060010161113e565b509095945050505050565b600082601f83011261117957600080fd5b60405160e0810181811067ffffffffffffffff8211171561119c5761119c61147b565b604052808360e081018610156111b157600080fd5b60005b60078110156111d35781358352602092830192909101906001016111b4565b509195945050505050565b6000604082840312156111f057600080fd5b6040516040810181811067ffffffffffffffff821117156112135761121361147b565b604052823581526020928301359281019290925250919050565b6000806000806101e0858703121561124457600080fd5b61124e8686611110565b9350604086605f87011261126157600080fd5b61126961139b565b8082880160c089018a81111561127e57600080fd5b60005b60028110156112a8576112948c84611110565b855260209094019391850191600101611281565b508297506112b68b82611110565b965050505050506112cb866101008701611168565b905092959194509250565b6000808284036101e08112156112eb57600080fd5b610100808212156112fb57600080fd5b6040516060810181811067ffffffffffffffff8211171561131e5761131e61147b565b60405261132b87876111de565b81526080603f198401121561133f57600080fd5b61134761139b565b92506113568760408801611110565b83526113658760808801611110565b602084015282602082015261137d8760c088016111de565b6040820152935061139086868301611168565b925050509250929050565b6040805190810167ffffffffffffffff811182821017156113be576113be61147b565b60405290565b600082198211156113d7576113d761144f565b500190565b60008160001904831182151516156113f6576113f661144f565b500290565b60008282101561140d5761140d61144f565b500390565b60006000198214156114265761142661144f565b5060010190565b60008261144a57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122045f91483aa5c3004102f639ed89a365da95768c094f054c8e45b3b033d57d22264736f6c63430008070033608060405234801561001057600080fd5b506114c9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636a89a2101461003b578063f07322a714610062575b600080fd5b61004e61004936600461122f565b610075565b604051901515815260200160405180910390f35b61004e6100703660046112d8565b610189565b600061007f610fd8565b604080518082018252875181526020808901518183015290835281516080810183528751518184019081528851830151606083015281528251808401845288830180515182525183015181840152818301528382015281518083018352865181528682015181830152838301528151600780825261010082019093526000929091820160e08036833701905050905060005b60078110156101605784816007811061012c5761012c611467565b602002015182828151811061014357610143611467565b60209081029190910101528061015881611414565b915050610111565b5061016b8183610227565b61017a57600192505050610181565b6000925050505b949350505050565b60408051600780825261010082019092526000918291906020820160e08036833701905050905060005b6007811015610202578381600781106101ce576101ce611467565b60200201518282815181106101e5576101e5611467565b6020908102919091010152806101fa81611414565b9150506101b3565b5061020d8185610227565b61021b576001915050610221565b60009150505b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816102536103aa565b90508060800151518551600161026991906113c6565b1461027357600080fd5b604080518082019091526000808252602082018190525b865181101561032157838782815181106102a6576102a6611467565b6020026020010151106102b857600080fd5b61030d8261030885608001518460016102d191906113c6565b815181106102e1576102e1611467565b60200260200101518a85815181106102fb576102fb611467565b6020026020010151610a10565b610a74565b91508061031981611414565b91505061028a565b5061034a81836080015160008151811061033d5761033d611467565b6020026020010151610a74565b905061038e8560000151866020015161036284610ace565b85604001516103748a60400151610ace565b6060880151885161038490610ace565b8960200151610b6d565b61039e5760019350505050610221565b50600095945050505050565b6103b2611029565b6040805180820182527f2be9aa9d98c36097d23018b324544db44c65bb322e423e2230395ab987d9623681527f2b6640989578bd133383f3d7c9ffc66d50140c480b36dbcc4ae17a48a1f9f3d66020808301919091529083528151608080820184527f2d18d01152753bd255c6489b7c1669a815138aecdfecc061871a9915735565408285019081527f194a7bfc2935f1a29440e49e9b5d2f2db4a03faeea701f5e77b24b71f1e2dc11606080850191909152908352845180860186527f08e789520cac19751c93fb2b1d5069ba9a34840e0730d2030c6b9b397f1b638d81527f1c5ec11e5aa708ff661e41daca868f31db4640a7ead28f805f281fbad2b17ff6818601528385015285840192909252835180820185527f27b08001f2268346b378c5612372946dc61fcebc1dcc523dacdd2d8bf36619eb8186019081527f097fe8d4aae90d17d9fb80818aeb5942f3be9a3f74979c1674ac37099497bf42828501528152845180860186527f14dc9cb44460306b5dc72cf12757e522df40b197d4ca1cb2a9edb188ad40b03781527f165718675e3dbd6068d0377c4a7137cb3369dde2986bbf34a111e505f5619f13818601528185015285850152835190810184527f25df1c48b1ab1177840631c433126b85935e6c311ea61f80d37f98c5c55677ea8185019081527f1fef6f4f6958a12ccaa40ad718f807666f00639fb1d601e8992069882026964b828401528152835180850185527f1077b96e6afe35b56890ccb519e39bce2b972a65a0c6a8766c714b955197153381527f290b2ec815f26b76b68a9c460afce68a36d23c70d06af6731e64c24b58f9527e818501528184015290840152815160088082526101208201909352919082015b604080518082019091526000808252602082015281526020019060019003908161062e57505060808201908152604080518082019091527f305a4df4ac9814f312122f06ec193ef82092ef9ebc18851523e2ef757d20baa381527f10f4187860c99208580fa2778182e6a8aaaeaee4f6bbb2fd481e57e83caeac9d6020820152905180516000906106c1576106c1611467565b602002602001018190525060405180604001604052807f0eb70d9b7d8621ac418543df4566159c1a14de0b62ae1974639a686451ec32bf81526020017f0ec9afb2351903a49e77103e8199aa8ba8677d3af779b8c018cd2bd43700fb67815250816080015160018151811061073857610738611467565b602002602001018190525060405180604001604052807f0e3c5dc4787280af69740d4b389dacbfb0321abec564c70fef8ce9434d86f48381526020017f05be0847365c214a5dea6408d75b85aea16726aa85c76c7faa7e1b679a614f6c81525081608001516002815181106107af576107af611467565b602002602001018190525060405180604001604052807f08993d32540ad85545f62907ba2dad73f64dacc891ec68aa05a094bd25e5fb6981526020017f284d5e1a7cdd2927ed9aa57f2f176d43aa3bb7a6d166992383d62cdfa22a6ade815250816080015160038151811061082657610826611467565b602002602001018190525060405180604001604052807f2117435faade55767c40aa1cbb59ac609c7d2fd06752d25179e48a159950c50481526020017f03ce0896b02a02b098be84bee28cd581c4513a60e451f82b17e086b7ee37fe75815250816080015160048151811061089d5761089d611467565b602002602001018190525060405180604001604052807f02bd0673ae2484089971dc7e8fbf4763eb2775a3794912e94afda8f5acb6801281526020017f1c7b8ff1975c04204db21afd2d78abfb5fa4acc9e7dea6fabfd95a7fb573cdeb815250816080015160058151811061091457610914611467565b602002602001018190525060405180604001604052807f1d2fcc0b398fb0565b6536317e216747331b91723b65dffd0b5c27cef4d0646481526020017f051c5b1f4a4e0de6d6f03629c2bb196043eeb51480d5a2d9e9de53a8cdd1cfa6815250816080015160068151811061098b5761098b611467565b602002602001018190525060405180604001604052807f280192c9310b8e666a4ddecc06c5976a6af13e547e9bedccb74b5a8f8bf372f981526020017f0cef81bb221f46f812cf79fd1241167b8b469b11b96f7db8092fc122a79829af8152508160800151600781518110610a0257610a02611467565b602002602001018190525090565b6040805180820190915260008082526020820152610a2c61107a565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610a5f57610a61565bfe5b5080610a6c57600080fd5b505092915050565b6040805180820190915260008082526020820152610a90611098565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610a5f57610a61565b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790158015610b1557506020830151155b15610b355750506040805180820190915260008082526020820152919050565b604051806040016040528084600001518152602001828560200151610b5a919061142f565b610b6490846113fd565b90529392505050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610b8857505060408051600480825260a0820190925291925060009190602082015b610bd26110b6565b815260200190600190039081610bca5790505090508a82600081518110610bfb57610bfb611467565b60200260200101819052508882600181518110610c1a57610c1a611467565b60200260200101819052508682600281518110610c3957610c39611467565b60200260200101819052508482600381518110610c5857610c58611467565b60200260200101819052508981600081518110610c7757610c77611467565b60200260200101819052508781600181518110610c9657610c96611467565b60200260200101819052508581600281518110610cb557610cb5611467565b60200260200101819052508381600381518110610cd457610cd4611467565b6020026020010181905250610ce98282610cf8565b9b9a5050505050505050505050565b60008151835114610d0857600080fd5b82516000610d178260066113de565b905060008167ffffffffffffffff811115610d3457610d3461147d565b604051908082528060200260200182016040528015610d5d578160200160208202803683370190505b50905060005b83811015610f9857868181518110610d7d57610d7d611467565b60200260200101516000015182826006610d9791906113de565b610da29060006113c6565b81518110610db257610db2611467565b602002602001018181525050868181518110610dd057610dd0611467565b60200260200101516020015182826006610dea91906113de565b610df59060016113c6565b81518110610e0557610e05611467565b602002602001018181525050858181518110610e2357610e23611467565b60209081029190910181015151015182610e3e8360066113de565b610e499060026113c6565b81518110610e5957610e59611467565b602002602001018181525050858181518110610e7757610e77611467565b6020908102919091010151515182610e908360066113de565b610e9b9060036113c6565b81518110610eab57610eab611467565b602002602001018181525050858181518110610ec957610ec9611467565b602002602001015160200151600160028110610ee757610ee7611467565b602002015182610ef88360066113de565b610f039060046113c6565b81518110610f1357610f13611467565b602002602001018181525050858181518110610f3157610f31611467565b602002602001015160200151600060028110610f4f57610f4f611467565b602002015182610f608360066113de565b610f6b9060056113c6565b81518110610f7b57610f7b611467565b602090810291909101015280610f9081611414565b915050610d63565b50610fa16110d6565b6000602082602086026020860160086107d05a03fa9050808015610a5f575080610fca57600080fd5b505115159695505050505050565b6040805160a0810190915260006060820181815260808301919091528152602081016110026110b6565b8152602001611024604051806040016040528060008152602001600081525090565b905290565b6040805160e08101909152600060a0820181815260c08301919091528152602081016110536110b6565b81526020016110606110b6565b815260200161106d6110b6565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806110c96110f4565b81526020016110246110f4565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600082601f83011261112357600080fd5b61112b61139d565b80838560408601111561113d57600080fd5b60005b600281101561115f578135845260209384019390910190600101611140565b509095945050505050565b600082601f83011261117b57600080fd5b60405160e0810181811067ffffffffffffffff8211171561119e5761119e61147d565b604052808360e081018610156111b357600080fd5b60005b60078110156111d55781358352602092830192909101906001016111b6565b509195945050505050565b6000604082840312156111f257600080fd5b6040516040810181811067ffffffffffffffff821117156112155761121561147d565b604052823581526020928301359281019290925250919050565b6000806000806101e0858703121561124657600080fd5b6112508686611112565b9350604086605f87011261126357600080fd5b61126b61139d565b8082880160c089018a81111561128057600080fd5b60005b60028110156112aa576112968c84611112565b855260209094019391850191600101611283565b508297506112b88b82611112565b965050505050506112cd86610100870161116a565b905092959194509250565b6000808284036101e08112156112ed57600080fd5b610100808212156112fd57600080fd5b6040516060810181811067ffffffffffffffff821117156113205761132061147d565b60405261132d87876111e0565b81526080603f198401121561134157600080fd5b61134961139d565b92506113588760408801611112565b83526113678760808801611112565b602084015282602082015261137f8760c088016111e0565b604082015293506113928686830161116a565b925050509250929050565b6040805190810167ffffffffffffffff811182821017156113c0576113c061147d565b60405290565b600082198211156113d9576113d9611451565b500190565b60008160001904831182151516156113f8576113f8611451565b500290565b60008282101561140f5761140f611451565b500390565b600060001982141561142857611428611451565b5060010190565b60008261144c57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212208aabc84ced1deee47f96e9379b55d4a7620a737b2fff037c327d71890a2a7c7564736f6c63430008070033608060405234801561001057600080fd5b50611366806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063799afa761461003b578063aa24152214610062575b600080fd5b61004e610049366004611175565b610075565b604051901515815260200160405180910390f35b61004e6100703660046110cc565b610112565b60408051600480825260a082019092526000918291906020820160808036833701905050905060005b60048110156100ed578381600481106100b9576100b9611304565b60200201518282815181106100d0576100d0611304565b6020908102919091010152806100e5816112b1565b91505061009e565b506100f8818561022b565b61010657600191505061010c565b60009150505b92915050565b600061011c610e75565b60408051808201825287518152602080890151818301529083528151608080820184528851518285019081528951840151606084015282528351808501855289840180515182525184015181850152828401528483019190915282518084018452875181528783015181840152848401528251600480825260a0820190945260009390929091908301908036833701905050905060005b6004811015610202578481600481106101ce576101ce611304565b60200201518282815181106101e5576101e5611304565b6020908102919091010152806101fa816112b1565b9150506101b3565b5061020d818361022b565b61021c57600192505050610223565b6000925050505b949350505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816102576103ae565b90508060800151518551600161026d9190611263565b1461027757600080fd5b604080518082019091526000808252602082018190525b865181101561032557838782815181106102aa576102aa611304565b6020026020010151106102bc57600080fd5b6103118261030c85608001518460016102d59190611263565b815181106102e5576102e5611304565b60200260200101518a85815181106102ff576102ff611304565b60200260200101516108ad565b610911565b91508061031d816112b1565b91505061028e565b5061034e81836080015160008151811061034157610341611304565b6020026020010151610911565b9050610392856000015186602001516103668461096b565b85604001516103788a6040015161096b565b606088015188516103889061096b565b8960200151610a0a565b6103a2576001935050505061010c565b50600095945050505050565b6103b6610ec6565b6040805180820182527f0ad59fe0cf3d65ff79d5737b8e1d7e09faae1f4e0b243aa3ccfe69802865d38b81527f1ffd791e49fbeb17ec51840c0675b59b61e88e457365b6b31422460032d56e996020808301919091529083528151608080820184527eb9d0ac3c05c97597d730e5e68138b0bc8f9b6524ef650e28f89d8c876285378285019081527f065fe1b2fa0958b16a5c7f9bf8cf168073beeb1fe54453776c6cdc657c40bcd5606080850191909152908352845180860186527f0e6d07816d63b9a2aacfa48d5aa789f09acf7ece62e5b11ffcb64eb234fa13b681527f0bc9a1bfbeb0a18d110178ab9bbc5fff5f461364f6964fd86ee6cf9e7fe03fb3818601528385015285840192909252835180820185527f01ef8f778fa24c70b5879d96c4ff126e63d3d014579d311c5f24d32873e835d48186019081527f1a56ef1933584cc70c0664d83998c994e2af2f643e970ee30dbaf0e4f03cdbc4828501528152845180860186527f094a65ec6504a03a903f69ee4fe13088e45bd4c5eb3e27950c6d708a4d099bc381527f26bf1bb3b1e49c0166b914b01e9b62071b3702e659131535ceebf4adaf4fca79818601528185015285850152835190810184527f11b3caa3ecdaeeb2bb09ccc1499998dcaf20332459aa5c54fc57351cd54a6f488185019081527f0ab3898a982a44435854c98a9f4ff6ecdc0fd3747ef27fe022b1f17932f4c95c828401528152835180850185527f2d4c424627c0fed7fb8a6527f62250187df0334649676e945fd93080b4f19d0e81527f088b495d8c6a6ab3e8795af69ed3ca91290d3b4f6f2f4fd9a59af9c298727b618185015281840152908401528151600580825260c08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161063057505060808201908152604080518082019091527f22a6b676c1ce7d4a49f67468d9a6c41aadef59a454084c90dfeaca00fe5adf5f81527f0d69cb56839f61c5f807348c31149620b2a62ff2606fa677be87796240cc268c6020820152905180516000906106c3576106c3611304565b602002602001018190525060405180604001604052807f1b2592fdd910ea1e310bbf1a7055d1662b1507d016b4eb42edf0040bc343899581526020017f1cac4fe4f6fcdc77a2b4cacd9dce9e6f158749106e4b54919ec6d177b78e7ad9815250816080015160018151811061073a5761073a611304565b602002602001018190525060405180604001604052807f0456f1b7c68d02b0d876f91f44b8b3063d469bb2f9dc5bc7f0d9fa9099a2393681526020017f05860ddc1381e38882c731cbbcf8589616a2b3ab76b3f6f03230ee94c974cb4b81525081608001516002815181106107b1576107b1611304565b602002602001018190525060405180604001604052807f2d53da0bc8c458d5da2e8898e9fe4d028f97f14bbce8a8f9d532ac459d084efd81526020017f111c6acaf1bbed7b982706b12fa1d602b4c112c4f2019ff2424c2d8a56fa553a815250816080015160038151811061082857610828611304565b602002602001018190525060405180604001604052807f20fd97b908a138a38de7f34fe37eb018528177e247806fa59b7cd3d4fcb0cfc881526020017f02e0404660fe6072ef512a75cbc7265bf909a4cb19436ab8d2ea1b0b98677afb815250816080015160048151811061089f5761089f611304565b602002602001018190525090565b60408051808201909152600080825260208201526108c9610f17565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa90508080156108fc576108fe565bfe5b508061090957600080fd5b505092915050565b604080518082019091526000808252602082015261092d610f35565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa90508080156108fc576108fe565b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47901580156109b257506020830151155b156109d25750506040805180820190915260008082526020820152919050565b6040518060400160405280846000015181526020018285602001516109f791906112cc565b610a01908461129a565b90529392505050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610a2557505060408051600480825260a0820190925291925060009190602082015b610a6f610f53565b815260200190600190039081610a675790505090508a82600081518110610a9857610a98611304565b60200260200101819052508882600181518110610ab757610ab7611304565b60200260200101819052508682600281518110610ad657610ad6611304565b60200260200101819052508482600381518110610af557610af5611304565b60200260200101819052508981600081518110610b1457610b14611304565b60200260200101819052508781600181518110610b3357610b33611304565b60200260200101819052508581600281518110610b5257610b52611304565b60200260200101819052508381600381518110610b7157610b71611304565b6020026020010181905250610b868282610b95565b9b9a5050505050505050505050565b60008151835114610ba557600080fd5b82516000610bb482600661127b565b905060008167ffffffffffffffff811115610bd157610bd161131a565b604051908082528060200260200182016040528015610bfa578160200160208202803683370190505b50905060005b83811015610e3557868181518110610c1a57610c1a611304565b60200260200101516000015182826006610c34919061127b565b610c3f906000611263565b81518110610c4f57610c4f611304565b602002602001018181525050868181518110610c6d57610c6d611304565b60200260200101516020015182826006610c87919061127b565b610c92906001611263565b81518110610ca257610ca2611304565b602002602001018181525050858181518110610cc057610cc0611304565b60209081029190910181015151015182610cdb83600661127b565b610ce6906002611263565b81518110610cf657610cf6611304565b602002602001018181525050858181518110610d1457610d14611304565b6020908102919091010151515182610d2d83600661127b565b610d38906003611263565b81518110610d4857610d48611304565b602002602001018181525050858181518110610d6657610d66611304565b602002602001015160200151600160028110610d8457610d84611304565b602002015182610d9583600661127b565b610da0906004611263565b81518110610db057610db0611304565b602002602001018181525050858181518110610dce57610dce611304565b602002602001015160200151600060028110610dec57610dec611304565b602002015182610dfd83600661127b565b610e08906005611263565b81518110610e1857610e18611304565b602090810291909101015280610e2d816112b1565b915050610c00565b50610e3e610f73565b6000602082602086026020860160086107d05a03fa90508080156108fc575080610e6757600080fd5b505115159695505050505050565b6040805160a081019091526000606082018181526080830191909152815260208101610e9f610f53565b8152602001610ec1604051806040016040528060008152602001600081525090565b905290565b6040805160e08101909152600060a0820181815260c0830191909152815260208101610ef0610f53565b8152602001610efd610f53565b8152602001610f0a610f53565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518060400160405280610f66610f91565b8152602001610ec1610f91565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600082601f830112610fc057600080fd5b610fc861123a565b808385604086011115610fda57600080fd5b60005b6002811015610ffc578135845260209384019390910190600101610fdd565b509095945050505050565b600082601f83011261101857600080fd5b6040516080810181811067ffffffffffffffff8211171561103b5761103b61131a565b60405280836080810186101561105057600080fd5b60005b6004811015611072578135835260209283019290910190600101611053565b509195945050505050565b60006040828403121561108f57600080fd5b6040516040810181811067ffffffffffffffff821117156110b2576110b261131a565b604052823581526020928301359281019290925250919050565b60008060008061018085870312156110e357600080fd5b6110ed8686610faf565b9350604086605f87011261110057600080fd5b61110861123a565b8082880160c089018a81111561111d57600080fd5b60005b6002811015611147576111338c84610faf565b855260209094019391850191600101611120565b508297506111558b82610faf565b9650505050505061116a866101008701611007565b905092959194509250565b60008082840361018081121561118a57600080fd5b6101008082121561119a57600080fd5b6040516060810181811067ffffffffffffffff821117156111bd576111bd61131a565b6040526111ca878761107d565b81526080603f19840112156111de57600080fd5b6111e661123a565b92506111f58760408801610faf565b83526112048760808801610faf565b602084015282602082015261121c8760c0880161107d565b6040820152935061122f86868301611007565b925050509250929050565b6040805190810167ffffffffffffffff8111828210171561125d5761125d61131a565b60405290565b60008219821115611276576112766112ee565b500190565b6000816000190483118215151615611295576112956112ee565b500290565b6000828210156112ac576112ac6112ee565b500390565b60006000198214156112c5576112c56112ee565b5060010190565b6000826112e957634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220cf1c14bc51001cdf098a8b88489609bedfa7df96cf1621f3b7282ca121ece60564736f6c63430008070033a264697066735822122011c08a742792ab2d3f58b61bfbbaa7c39a6cc28149fdc10781d0683a9e46676064736f6c63430008070033";

async function deploy_contract() {
    let token_group_name = $("#deploy-contract-token-group-name").val();
    let token_group_symbol = $("#deploy-contract-token-group-symbol").val();

    let signer = provider.getSigner(0);
    let factory = new ethers.ContractFactory(abi, bytecode, signer);
    let contract = await factory.deploy(String(token_group_name), String(token_group_symbol));

    $("#status-deploy-contract").html('<b style="color:green;">The multi-token contract is deployed on the address: ' + contract.address + '</b>');
}

async function collect_free_tokens() {
    let contract_address = $("#collect-free-tokens-contract-address").val();

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi, signer);
    
    let transaction = await contract.collectFreeTokens();
    
    $("#status-collect-free-tokens").html('<b style="color:green;">The free tokens are collected with the transaction: ' + transaction.hash +
                                                              '<br>Your current balance is [10,10,10,10,10,10,10,0] </b>');
}

async function get_consent() {
    let contract_address = $("#get-consent-contract-address").val();
    let user_address = $("#get-consent-user-address").val();

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi, signer);

    let transaction = await contract.requestToDeposit(String(user_address));

    $("#status-get-consent").html('<b style="color:green;">The request is submitted with the transaction: ' + transaction.hash + '</b>');
}

async function give_consent() {
    let contract_address = $("#give-consent-contract-address").val();
    let user_address = $("#give-consent-user-address").val();

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi, signer);

    const register_signer = provider.getSigner()
    const ethereum_address = await register_signer.getAddress()
    const hash = await ethers.utils.keccak256(ethereum_address)
    const signature = await signer.signMessage(ethers.utils.arrayify(hash))
    const public_key = ethers.utils.recoverPublicKey(ethers.utils.arrayify(ethers.utils.hashMessage(ethers.utils.arrayify(hash))), signature);

    let transaction = await contract.consentToDeposit(String(user_address), String(public_key));

    $("#status-give-consent").html('<b style="color:green;">The consent is submitted with the transaction: ' + transaction.hash + '</b>');
}

async function deposit_tokens() {
    let contract_address = $("#deposit-tokens-contract-address").val();
    let user_address = $("#deposit-tokens-user-address").val();
    let balance_list = $("#deposit-tokens-balance").val();
    let deposit_list = $("#deposit-tokens-tokens-deposit").val();

    balance_list = JSON.parse(balance_list);
    deposit_list = JSON.parse(deposit_list);
    let next_balance_list = balance_list.map((element, index) => element - deposit_list[index]); 
    
    deposit_list[deposit_list.length - 1] = Math.floor(Math.random() * (10 ** 3));
    next_balance_list[next_balance_list.length - 1] = Math.floor(Math.random() * (10 ** 3));

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi, signer);

    let balance_commitment = await zokrates_hash(balance_list.map(String), balance_list.map(String));
    balance_commitment = JSON.parse(balance_commitment);

    let deposit_commitment = await zokrates_hash(deposit_list.map(String), deposit_list.map(String));
    deposit_commitment = JSON.parse(deposit_commitment);

    let next_balance_commitment = await zokrates_hash(next_balance_list.map(String), next_balance_list.map(String));
    next_balance_commitment = JSON.parse(next_balance_commitment);

    console.time('Proof Generation Time');

    let proof = await zokrates_deposit_proof(balance_list.map(String), deposit_list.map(String), String(next_balance_list[next_balance_list.length - 1]), String(balance_commitment), String(deposit_commitment), String(next_balance_commitment));
                          
    console.timeEnd('Proof Generation Time');

    let public_key = await contract.getPublicKey(String(user_address));
    let secret_message = await encrypt(public_key.substr(2), JSON.stringify(deposit_list)); 

    console.log(proof);
    
    let transaction = await contract.privateDeposit(proof.proof.a, proof.proof.b, proof.proof.c, String(user_address), String(deposit_commitment), String(next_balance_commitment), String(secret_message));

    $("#status-deposit-tokens").html('<b style="color:green;">The tokens are deposited with the transaction ' + transaction.hash + 
                                                         '<br>Your current balance is ' + JSON.stringify(next_balance_list) + ' </b>');
}

async function withdraw_tokens() {
    let contract_address = $("#withdraw-tokens-contract-address").val();
    let user_address = $("#withdraw-tokens-user-address").val();
    let balance_list = $("#withdraw-tokens-balance").val();
    let private_key = $("#withdraw-tokens-private-key").val();

    balance_list = JSON.parse(balance_list);

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(contract_address, abi, signer);

    let secret_message = await contract.getSecretMessage(String(user_address));
    let withdraw_list = await decrypt(private_key, secret_message);
    withdraw_list = JSON.parse(withdraw_list);
    let next_balance_list = balance_list.map((element, index) => element + withdraw_list[index]); 
    next_balance_list[next_balance_list.length - 1] = Math.floor(Math.random() * (10 ** 3));

    let balance_commitment = await zokrates_hash(balance_list.map(String), balance_list.map(String));
    balance_commitment = JSON.parse(balance_commitment);

    let withdraw_commitment = await zokrates_hash(withdraw_list.map(String), withdraw_list.map(String));
    withdraw_commitment = JSON.parse(withdraw_commitment);

    let next_balance_commitment = await zokrates_hash(next_balance_list.map(String), next_balance_list.map(String));
    next_balance_commitment = JSON.parse(next_balance_commitment);

    console.log(balance_commitment);
    console.log(withdraw_commitment);
    console.log(next_balance_commitment);
 
    console.time('Proof Generation Time');

    let proof = await zokrates_withdraw_proof(balance_list.map(String), withdraw_list.map(String), String(next_balance_list[next_balance_list.length - 1]), String(balance_commitment), String(withdraw_commitment), String(next_balance_commitment));
         
    console.timeEnd('Proof Generation Time');

    console.log(proof);     

    let transaction = await contract.privateWithdraw(proof.proof.a, proof.proof.b, proof.proof.c, String(user_address), String(next_balance_commitment));

    $("#status-withdraw-tokens").html('<b style="color:green;">The tokens are withdrawn with the transaction ' + transaction.hash + 
                                                          '<br>Your current balance is ' + JSON.stringify(next_balance_list) + ' </b>');
}

async function deploy_barter_contract() {
    let contract_address = $("#deploy-barter-contract-address").val();
    let maximum_user = $("#deploy-barter-maximum-user").val();
    let maximum_bid_reproposal_cycle = $("#deploy-barter-maximum-bid-repropsal-cycle").val();

    let signer = provider.getSigner(0);
    let factory = new ethers.ContractFactory(abi_barter, bytecode_barter, signer);
    let contract = await factory.deploy(String(contract_address), String(maximum_user), String(maximum_bid_reproposal_cycle));

    $("#status-deploy-barter").html('<b style="color:green;">The barter contract is deployed on the address: ' + contract.address + ' </b>');
}

async function propose_bid() {
    let contract_address = $("#propose-bid-contract-address").val();
    let balance = $("#propose-bid-balance").val();
    let next_bid_left_A = $("#propose-bid-tokens-sell").val();
    let next_bid_right_A = $("#propose-bid-tokens-buy").val();

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi_barter, signer);

    let bid_left_A = [0,0,0,0,0,0,0,0];
    let bid_right_A = [1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,0];
    let bid_left_B = [0,0,0,0,0,0,0,0];
    let bid_right_B = [0,0,0,0,0,0,0,0];

    balance = JSON.parse(balance);
    next_bid_left_A = JSON.parse(next_bid_left_A);
    next_bid_right_A = JSON.parse(next_bid_right_A);

    let next_balance = balance.map((element, index) => element + bid_left_A[index] - next_bid_left_A[index]); 
    next_balance[next_balance.length - 1] = Math.floor(Math.random() * (10 ** 3));

    let next_bid_left_B = Array.from({length: 7}, () => Math.floor(Math.random() * 10 ** 3));
    next_bid_left_B.push(Math.floor(Math.random() * (10 ** 3)));
    let next_bid_right_B = Array.from({length: 7}, () => Math.floor(Math.random() * 10 ** 3));
    next_bid_right_B.push(Math.floor(Math.random() * (10 ** 3)));

    next_bid_left_A = next_bid_left_A.map((element, index) => element + next_bid_left_B[index]); 
    next_bid_right_A = next_bid_right_A.map((element, index) => element + next_bid_right_B[index]); 
    next_bid_left_A[next_bid_left_A.length - 1] = Math.floor(Math.random() * (10 ** 3));
    next_bid_right_A[next_bid_right_A.length - 1] = Math.floor(Math.random() * (10 ** 3));

    let balance_commitment = await zokrates_hash(balance.map(String), balance.map(String));
    balance_commitment = JSON.parse(balance_commitment);

    let next_balance_commitment = await zokrates_hash(next_balance.map(String), next_balance.map(String));
    next_balance_commitment = JSON.parse(next_balance_commitment);

    let bid_commitment_A = await zokrates_hash(bid_left_A.map(String), bid_right_A.map(String));
    bid_commitment_A = JSON.parse(bid_commitment_A);

    let bid_commitment_B = await zokrates_hash(bid_left_B.map(String), bid_right_B.map(String));
    bid_commitment_B = JSON.parse(bid_commitment_B);

    let next_bid_commitment_A = await zokrates_hash(next_bid_left_A.map(String), next_bid_right_A.map(String));
    next_bid_commitment_A = JSON.parse(next_bid_commitment_A);

    let next_bid_commitment_B = await zokrates_hash(next_bid_left_B.map(String), next_bid_right_B.map(String));
    next_bid_commitment_B = JSON.parse(next_bid_commitment_B);

    console.log(next_balance);
    console.log(next_bid_left_A);
    console.log(next_bid_right_A);

    console.log(balance_commitment);
    console.log(next_balance_commitment);
    console.log(bid_commitment_A);
    console.log(bid_commitment_B);
    console.log(next_bid_commitment_A);
    console.log(next_bid_commitment_B);

    console.time('Proof Generation Time');

    let proof = await zokrates_reproposal_proof(balance.map(String), String(next_balance[next_balance.length - 1]), bid_left_A.map(String), bid_right_A.map(String), bid_left_B.map(String), bid_right_B.map(String), next_bid_left_A.map(String), next_bid_right_A.map(String), next_bid_left_B.map(String), next_bid_right_B.map(String), bid_commitment_A, bid_commitment_B, next_bid_commitment_A, next_bid_commitment_B, balance_commitment, next_balance_commitment);
         
    console.timeEnd('Proof Generation Time');

    console.log(proof);

    const register_signer = provider.getSigner()
    const ethereum_address = await register_signer.getAddress()
    const hash = await ethers.utils.keccak256(ethereum_address)
    const signature = await signer.signMessage(ethers.utils.arrayify(hash))
    const public_key = ethers.utils.recoverPublicKey(ethers.utils.arrayify(ethers.utils.hashMessage(ethers.utils.arrayify(hash))), signature);

    let transaction = await contract.proposeBid(proof.proof.a, proof.proof.b, proof.proof.c, String(next_bid_commitment_A), String(next_bid_commitment_B), String(next_balance_commitment), String(public_key));

    for (let index = 0; index < next_bid_left_A.length - 1; index++) {
        next_bid_left_A[index] -= next_bid_left_B[index];
        next_bid_right_A[index] -= next_bid_right_B[index];
    }
    $("#status-propose-bid").html('<b style="color:green;">The bid is proposed with the transaction ' + transaction.hash + 
                                                      '<br>Your current balance is ' + JSON.stringify(next_balance) + 
                                                      '<br>Your bid (A) is ' + JSON.stringify(next_bid_left_A) + ' ' + JSON.stringify(next_bid_right_A) + 
                                                      '<br>Your bid (B) is ' + JSON.stringify(next_bid_left_B) + ' ' + JSON.stringify(next_bid_right_B) + ' </b>');
}

async function repropose_bid() {
    let contract_address = $("#repropose-bid-contract-address").val();
    let balance = $("#repropose-bid-balance").val();
    let bid_left_A = $("#repropose-bid-previous-tokens-sell").val();
    let bid_right_A = $("#repropose-bid-previous-tokens-buy").val();
    let bid_left_B = $("#repropose-bid-previous-secure-sell").val();
    let bid_right_B = $("#repropose-bid-previous-secure-buy").val();
    let next_bid_left_A = $("#repropose-bid-tokens-sell").val();
    let next_bid_right_A = $("#repropose-bid-tokens-buy").val();

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi_barter, signer);

    balance = JSON.parse(balance);
    bid_left_A = JSON.parse(bid_left_A);
    bid_right_A = JSON.parse(bid_right_A);
    bid_left_B = JSON.parse(bid_left_B);
    bid_right_B = JSON.parse(bid_right_B);
    next_bid_left_A = JSON.parse(next_bid_left_A);
    next_bid_right_A = JSON.parse(next_bid_right_A);

    let next_balance = balance.map((element, index) => element + bid_left_A[index] - next_bid_left_A[index]); 
    next_balance[next_balance.length - 1] = Math.floor(Math.random() * (10 ** 3));

    for (let index = 0; index < bid_left_A.length - 1; index++) {
        bid_left_A[index] += bid_left_B[index];
        bid_right_A[index] += bid_right_B[index];
    }

    let next_bid_left_B = Array.from({length: 7}, () => Math.floor(Math.random() * 10 ** 3));
    next_bid_left_B.push(Math.floor(Math.random() * (10 ** 3)));
    let next_bid_right_B = Array.from({length: 7}, () => Math.floor(Math.random() * 10 ** 3));
    next_bid_right_B.push(Math.floor(Math.random() * (10 ** 3)));
    
    next_bid_left_A = next_bid_left_A.map((element, index) => element + next_bid_left_B[index]); 
    next_bid_right_A = next_bid_right_A.map((element, index) => element + next_bid_right_B[index]); 
    next_bid_left_A[next_bid_left_A.length - 1] = Math.floor(Math.random() * (10 ** 3));
    next_bid_right_A[next_bid_right_A.length - 1] = Math.floor(Math.random() * (10 ** 3));

    let balance_commitment = await zokrates_hash(balance.map(String), balance.map(String));
    balance_commitment = JSON.parse(balance_commitment);

    let next_balance_commitment = await zokrates_hash(next_balance.map(String), next_balance.map(String));
    next_balance_commitment = JSON.parse(next_balance_commitment);

    let bid_commitment_A = await zokrates_hash(bid_left_A.map(String), bid_right_A.map(String));
    bid_commitment_A = JSON.parse(bid_commitment_A);

    let bid_commitment_B = await zokrates_hash(bid_left_B.map(String), bid_right_B.map(String));
    bid_commitment_B = JSON.parse(bid_commitment_B);

    let next_bid_commitment_A = await zokrates_hash(next_bid_left_A.map(String), next_bid_right_A.map(String));
    next_bid_commitment_A = JSON.parse(next_bid_commitment_A);

    let next_bid_commitment_B = await zokrates_hash(next_bid_left_B.map(String), next_bid_right_B.map(String));
    next_bid_commitment_B = JSON.parse(next_bid_commitment_B);

    console.log(next_balance);
    console.log(bid_left_A);
    console.log(bid_right_A);
    console.log(next_bid_left_A);
    console.log(next_bid_right_A);

    console.log(balance_commitment);
    console.log(next_balance_commitment);
    console.log(bid_commitment_A);
    console.log(bid_commitment_B);
    console.log(next_bid_commitment_A);
    console.log(next_bid_commitment_B);

    console.time('Proof Generation Time');

    let proof = await zokrates_reproposal_proof(balance.map(String), String(next_balance[next_balance.length - 1]), bid_left_A.map(String), bid_right_A.map(String), bid_left_B.map(String), bid_right_B.map(String), next_bid_left_A.map(String), next_bid_right_A.map(String), next_bid_left_B.map(String), next_bid_right_B.map(String), bid_commitment_A, bid_commitment_B, next_bid_commitment_A, next_bid_commitment_B, balance_commitment, next_balance_commitment);
         
    console.timeEnd('Proof Generation Time');

    console.log(proof);

    let transaction = await contract.reproposeBid(proof.proof.a, proof.proof.b, proof.proof.c, String(next_bid_commitment_A), String(next_bid_commitment_B), String(next_balance_commitment));

    for (let index = 0; index < next_bid_left_A.length - 1; index++) {
        next_bid_left_A[index] -= next_bid_left_B[index];
        next_bid_right_A[index] -= next_bid_right_B[index];
    }
    $("#status-repropose-bid").html('<b style="color:green;">The bid is proposed with the transaction ' + transaction.hash + 
                                                        '<br>Your current balance is ' + JSON.stringify(next_balance) + 
                                                        '<br>Your bid (A) is ' + JSON.stringify(next_bid_left_A) + ' ' + JSON.stringify(next_bid_right_A) + 
                                                        '<br>Your bid (B) is ' + JSON.stringify(next_bid_left_B) + ' ' + JSON.stringify(next_bid_right_B) + ' </b>');
}

async function submit_bid_sum() {
    let contract_address = $("#submit-bid-sum-contract-address").val();
    let bid_left_A = $("#submit-bid-sum-tokens-sell").val();
    let bid_right_A = $("#submit-bid-sum-tokens-buy").val();
    let bid_left_B = $("#submit-bid-sum-secure-sell").val();
    let bid_right_B = $("#submit-bid-sum-secure-buy").val();

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi_barter, signer);

    bid_left_A = JSON.parse(bid_left_A);
    bid_right_A = JSON.parse(bid_right_A);
    bid_left_B = JSON.parse(bid_left_B);
    bid_right_B = JSON.parse(bid_right_B);

    for (let index = 0; index < bid_left_A.length - 1; index++) {
        bid_left_A[index] += bid_left_B[index];
        bid_right_A[index] += bid_right_B[index];
    }

    let [public_key_A, public_key_B] = await contract.getHypercubePairsPublicKeys();
    let secret_message_A = await encrypt(public_key_A.substr(2), JSON.stringify(bid_left_A) + " " + JSON.stringify(bid_right_A)); 
    let secret_message_B = await encrypt(public_key_B.substr(2), JSON.stringify(bid_left_B) + " " + JSON.stringify(bid_right_B)); 

    console.log(public_key_A, secret_message_A);
    console.log(public_key_B, secret_message_B);

    let transaction = await contract.submitSecretBidAggregationToPairs(String(secret_message_A), String(secret_message_B));

    $("#status-submit-bid-sum").html('<b style="color:green;">The bid aggregation is submitted with the transaction: ' + transaction.hash);
}

async function verify_bid_sum() {
    let contract_address = $("#verify-bid-sum-contract-address").val();
    let my_bid_left_A = $("#verify-bid-sum-tokens-sell").val();
    let my_bid_right_A = $("#verify-bid-sum-tokens-buy").val();
    let my_bid_left_B = $("#verify-bid-sum-secure-sell").val();
    let my_bid_right_B = $("#verify-bid-sum-secure-buy").val(); 
    let private_key = $("#verify-bid-sum-private-key").val();

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi_barter, signer);

    my_bid_left_A = JSON.parse(my_bid_left_A);
    my_bid_right_A = JSON.parse(my_bid_right_A);
    my_bid_left_B = JSON.parse(my_bid_left_B);
    my_bid_right_B = JSON.parse(my_bid_right_B);

    for (let index = 0; index < my_bid_left_A.length - 1; index++) {
        my_bid_left_A[index] += my_bid_left_B[index];
        my_bid_right_A[index] += my_bid_right_B[index];
    }

    let [secret_message_A, secret_message_B, maximum_hypercube_stage, current_hypercube_stage] = await contract.getSecretBidAggregationFromPairs();
    secret_message_A = await decrypt(private_key, secret_message_A);
    secret_message_B = await decrypt(private_key, secret_message_B);

    let [pair_bid_left_A, pair_bid_right_A] = secret_message_A.split(" ");
    let [pair_bid_left_B, pair_bid_right_B] = secret_message_B.split(" ");
    
    pair_bid_left_A = JSON.parse(pair_bid_left_A);
    pair_bid_right_A = JSON.parse(pair_bid_right_A);
    pair_bid_left_B = JSON.parse(pair_bid_left_B);
    pair_bid_right_B = JSON.parse(pair_bid_right_B);

    let sum_bid_left_A = my_bid_left_A.map((element, index) => element + pair_bid_left_A[index]);
    let sum_bid_left_B = my_bid_left_B.map((element, index) => element + pair_bid_left_B[index]);
    let sum_bid_right_A = my_bid_right_A.map((element, index) => element + pair_bid_right_A[index]);
    let sum_bid_right_B = my_bid_right_B.map((element, index) => element + pair_bid_right_B[index]);

    sum_bid_left_A[sum_bid_left_A.length - 1] = my_bid_left_A[my_bid_left_A.length - 1];
    sum_bid_left_B[sum_bid_left_B.length - 1] = my_bid_left_B[my_bid_left_B.length - 1];
    sum_bid_right_A[sum_bid_right_A.length - 1] = my_bid_right_A[my_bid_right_A.length - 1];
    sum_bid_right_B[sum_bid_right_B.length - 1] = my_bid_right_B[my_bid_right_B.length - 1];

    console.log(my_bid_left_A, my_bid_right_A);
    console.log(my_bid_left_B, my_bid_right_B);
    console.log(pair_bid_left_A, pair_bid_right_A);
    console.log(pair_bid_left_B, pair_bid_right_B);
    console.log(sum_bid_left_A, sum_bid_right_A);
    console.log(sum_bid_left_B, sum_bid_right_B);

    let my_bid_commitment_A = await zokrates_hash(my_bid_left_A.map(String), my_bid_right_A.map(String));
    my_bid_commitment_A = JSON.parse(my_bid_commitment_A);

    let my_bid_commitment_B = await zokrates_hash(my_bid_left_B.map(String), my_bid_right_B.map(String));
    my_bid_commitment_B = JSON.parse(my_bid_commitment_B);

    let pair_bid_commitment_A = await zokrates_hash(pair_bid_left_A.map(String), pair_bid_right_A.map(String));
    pair_bid_commitment_A = JSON.parse(pair_bid_commitment_A);

    let pair_bid_commitment_B = await zokrates_hash(pair_bid_left_B.map(String), pair_bid_right_B.map(String));
    pair_bid_commitment_B = JSON.parse(pair_bid_commitment_B);

    let sum_bid_commitment_A = await zokrates_hash(sum_bid_left_A.map(String), sum_bid_right_A.map(String));
    sum_bid_commitment_A = JSON.parse(sum_bid_commitment_A);

    let sum_bid_commitment_B = await zokrates_hash(sum_bid_left_B.map(String), sum_bid_right_B.map(String));
    sum_bid_commitment_B = JSON.parse(sum_bid_commitment_B);
    
    console.time('Proof Generation Time A');

    let proof_A = await zokrates_aggregation_proof(my_bid_left_A.map(String), my_bid_right_A.map(String), pair_bid_left_A.map(String), pair_bid_right_A.map(String), String(my_bid_commitment_A), String(pair_bid_commitment_A), String(sum_bid_commitment_A));

    console.timeEnd('Proof Generation Time A');

    console.time('Proof Generation Time B');

    let proof_B = await zokrates_aggregation_proof(my_bid_left_B.map(String), my_bid_right_B.map(String), pair_bid_left_B.map(String), pair_bid_right_B.map(String), String(my_bid_commitment_B), String(pair_bid_commitment_B), String(sum_bid_commitment_B));

    console.timeEnd('Proof Generation Time B');
    
    console.log(proof_A);
    console.log(proof_B);

    let transaction = await contract.verifyBidAggregation(proof_A.proof.a, proof_A.proof.b, proof_A.proof.c, proof_B.proof.a, proof_B.proof.b, proof_B.proof.c, String(sum_bid_commitment_A), String(sum_bid_commitment_B));

    if (Number(current_hypercube_stage) + 1 == Number(maximum_hypercube_stage)) {
        $("#status-verify-bid-sum").html('<b style="color:green;">The bid aggregation is verified with the transaction: ' + transaction.hash +                                                            
                                                             '<br>Your bid aggregation (A) is ' + JSON.stringify(sum_bid_left_A) + ' ' + JSON.stringify(sum_bid_right_A) + 
                                                             '<br>Your bid aggregation (B) is ' + JSON.stringify(sum_bid_left_B) + ' ' + JSON.stringify(sum_bid_right_B) + ' </b>');
    }
    else {
        $("#status-verify-bid-sum").html('<b style="color:green;">The final bid aggregation is verified with the transaction: ' + transaction.hash +                                                            
                                                             '<br>Your final bid aggregation (A) is ' + JSON.stringify(sum_bid_left_A) + ' ' + JSON.stringify(sum_bid_right_A) + 
                                                             '<br>Your final bid aggregation (B) is ' + JSON.stringify(sum_bid_left_B) + ' ' + JSON.stringify(sum_bid_right_B) + ' </b>');
    } 
}

async function barter_tokens() {
    let contract_address = $("#barter-tokens-contract-address").val();
    let balance = $("#barter-tokens-balance").val();
    let sum_bid_left_A = $("#barter-tokens-sum-tokens-sell").val();
    let sum_bid_right_A = $("#barter-tokens-sum-tokens-buy").val();
    let sum_bid_left_B = $("#barter-tokens-sum-secure-sell").val();
    let sum_bid_right_B = $("#barter-tokens-sum-secure-buy").val();
    let bid_left_A = $("#barter-tokens-tokens-sell").val();
    let bid_right_A = $("#barter-tokens-tokens-buy").val();
    let bid_left_B = $("#barter-tokens-secure-sell").val();
    let bid_right_B = $("#barter-tokens-secure-buy").val();

    let signer = provider.getSigner(0);
    let contract = new ethers.Contract(String(contract_address), abi_barter, signer);

    balance = JSON.parse(balance);
    sum_bid_left_A = JSON.parse(sum_bid_left_A);
    sum_bid_right_A = JSON.parse(sum_bid_right_A);
    sum_bid_left_B = JSON.parse(sum_bid_left_B);
    sum_bid_right_B = JSON.parse(sum_bid_right_B);
    bid_left_A = JSON.parse(bid_left_A);
    bid_right_A = JSON.parse(bid_right_A);
    bid_left_B = JSON.parse(bid_left_B);
    bid_right_B = JSON.parse(bid_right_B);

    let next_balance = balance.map((element, index) => element + bid_right_A[index]); 
    next_balance[next_balance.length - 1] = Math.floor(Math.random() * (10 ** 3));

    for (let index = 0; index < bid_left_A.length - 1; index++) {
        bid_left_A[index] += bid_left_B[index];
        bid_right_A[index] += bid_right_B[index];
    }

    let balance_commitment = await zokrates_hash(balance.map(String), balance.map(String));
    balance_commitment = JSON.parse(balance_commitment);

    let next_balance_commitment = await zokrates_hash(next_balance.map(String), next_balance.map(String));
    next_balance_commitment = JSON.parse(next_balance_commitment);

    let sum_bid_commitment_A = await zokrates_hash(sum_bid_left_A.map(String), sum_bid_right_A.map(String));
    sum_bid_commitment_A = JSON.parse(sum_bid_commitment_A);

    let sum_bid_commitment_B = await zokrates_hash(sum_bid_left_B.map(String), sum_bid_right_B.map(String));
    sum_bid_commitment_B = JSON.parse(sum_bid_commitment_B);

    let bid_commitment_A = await zokrates_hash(bid_left_A.map(String), bid_right_A.map(String));
    bid_commitment_A = JSON.parse(bid_commitment_A);

    let bid_commitment_B = await zokrates_hash(bid_left_B.map(String), bid_right_B.map(String));
    bid_commitment_B = JSON.parse(bid_commitment_B);

    console.log(next_balance);

    console.log(balance_commitment);
    console.log(next_balance_commitment);
    console.log(sum_bid_commitment_A);
    console.log(sum_bid_commitment_B);
    console.log(bid_commitment_A);
    console.log(bid_commitment_B);

    console.time('Proof Generation Time');

    let proof = await zokrates_barter_proof(balance.map(String), String(next_balance[next_balance.length - 1]), sum_bid_left_A.map(String), sum_bid_right_A.map(String), sum_bid_left_B.map(String), sum_bid_right_B.map(String), bid_left_A.map(String), bid_right_A.map(String), bid_left_B.map(String), bid_right_B.map(String), String(balance_commitment), String(next_balance_commitment), String(sum_bid_commitment_A), String(sum_bid_commitment_B), String(bid_commitment_A), String(bid_commitment_B));

    console.timeEnd('Proof Generation Time');

    console.log(proof);

    let transaction = await contract.barterTokens(proof.proof.a, proof.proof.b, proof.proof.c, next_balance_commitment);

    $("#status-barter-tokens").html('<b style="color:green;">The tokens are bartered with the transaction: ' + transaction.hash + 
                                                        '<br>Your current balance is ' + JSON.stringify(next_balance) + ' </b>');
}
